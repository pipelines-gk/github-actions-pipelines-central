name: Build and Push Docker Image

on:
  workflow_call:
    inputs:
      project_name:
        required: true
        type: string
      node_version:
        required: false
        default: "22"
        type: string
      workdir:
        description: "Directorio donde se ejecutar√°n los comandos"
        required: false
        type: string
        default: "."
      dockerfile:
        description: "Archivo Dockerfile a utilizar"
        required: false
        type: string
        default: "Dockerfile"
      enable_cache:
        description: "Enable Docker layer caching"
        required: false
        type: boolean
        default: true
    secrets:
      GH_TOKEN:
        required: true

permissions:
  contents: write
  packages: write
  actions: read

# Prevent concurrent builds for the same project - STRICT MODE
concurrency:
  group: build-${{ inputs.project_name }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 10
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: 'npm'
          cache-dependency-path: '${{ inputs.workdir }}/package-lock.json'

      # ‚ö° OPTIMIZACI√ìN #5: Cache agresivo de node_modules
      - name: Cache node_modules
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: |
            ${{ inputs.workdir }}/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ inputs.node_version }}-${{ hashFiles(format('{0}/package-lock.json', inputs.workdir)) }}
          restore-keys: |
            ${{ runner.os }}-node-${{ inputs.node_version }}-
            ${{ runner.os }}-node-

      - name: Download files from 1Password
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.project_name }}-files
          path: ${{ inputs.workdir }}

      - name: Verify .env file exists
        run: |
          WORKDIR="${{ inputs.workdir }}"
          if [ "$WORKDIR" = "." ]; then
            ENV_PATH=".env"
          else
            ENV_PATH="$WORKDIR/.env"
          fi
          
          if [ ! -f "$ENV_PATH" ]; then
            echo "‚ùå Error: .env file not found"
            exit 1
          fi

      - name: Process .env file and extract vars
        run: |
          WORKDIR="${{ inputs.workdir }}"
          if [ "$WORKDIR" != "." ]; then
            cd "$WORKDIR"
          fi

          DOCR_USERNAME=$(grep "^DOCR_USERNAME=" .env | cut -d'=' -f2)
          DOCR_PASSWORD=$(grep "^DOCR_PASSWORD=" .env | cut -d'=' -f2)

          if [ -z "$DOCR_USERNAME" ] || [ -z "$DOCR_PASSWORD" ]; then
            echo "‚ùå Missing DOCR credentials in .env"
            exit 1
          fi

          echo "DOCR_USERNAME=$DOCR_USERNAME" >> $GITHUB_ENV
          echo "DOCR_PASSWORD=$DOCR_PASSWORD" >> $GITHUB_ENV

      - name: Run Release Please (version only)
        id: release
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          release-type: simple
          path: .
          skip-github-release: true
          skip-github-pull-request: true

      - name: Extract version
        id: extract_version
        run: |
          VERSION="${{ steps.release.outputs.version }}"
          if [ -z "$VERSION" ]; then
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            IFS='.' read -r MAJOR MINOR PATCH <<< "${LAST_TAG#v}"
            PATCH=$((PATCH + 1))
            VERSION="${MAJOR}.${MINOR}.${PATCH}"
            echo "‚ö†Ô∏è No version found, defaulting to bumped version: v$VERSION"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Git tag with race condition protection
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config --global advice.detachedHead false

          VERSION="${{ steps.extract_version.outputs.version }}"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          MAX_ATTEMPTS=10
          ATTEMPT=1
          SUCCESS=false

          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            CANDIDATE_VERSION="${MAJOR}.${MINOR}.${PATCH}"
            echo "üîç Attempt $ATTEMPT/$MAX_ATTEMPTS - Testing version: v$CANDIDATE_VERSION"

            REMOTE_EXISTS=$(git ls-remote --tags origin "refs/tags/v${CANDIDATE_VERSION}" | wc -l)

            if [ "$REMOTE_EXISTS" -eq 0 ]; then
              echo "‚úÖ Version v$CANDIDATE_VERSION available"
              
              if git tag "v$CANDIDATE_VERSION" 2>/dev/null; then
                if git push origin "v$CANDIDATE_VERSION" 2>/dev/null; then
                  echo "VERSION=$CANDIDATE_VERSION" >> $GITHUB_ENV
                  echo "version=$CANDIDATE_VERSION" >> $GITHUB_OUTPUT
                  echo "‚úÖ Tag v$CANDIDATE_VERSION created successfully"
                  SUCCESS=true
                  break
                else
                  echo "‚ö†Ô∏è Push failed for v$CANDIDATE_VERSION - another job may have created it"
                  git tag -d "v$CANDIDATE_VERSION" 2>/dev/null || true
                fi
              else
                echo "‚ö†Ô∏è Local tag creation failed for v$CANDIDATE_VERSION"
              fi
            else
              echo "‚ö†Ô∏è Tag v$CANDIDATE_VERSION already exists remotely"
            fi

            PATCH=$((PATCH + 1))
            ATTEMPT=$((ATTEMPT + 1))
            sleep 2
          done

          if [ "$SUCCESS" = false ]; then
            echo "‚ùå Failed to create tag after $MAX_ATTEMPTS attempts"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          driver-opts: |
            image=moby/buildkit:latest
            network=host
          buildkitd-flags: --allow-insecure-entitlement=network.host
          buildkitd-config-inline: |
            [worker.oci]
              max-parallelism = 8
            [registry."registry.digitalocean.com"]
              mirrors = ["registry.digitalocean.com"]
              insecure = false

      - name: Log in to DigitalOcean Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: ${{ env.DOCR_USERNAME }}
          password: ${{ env.DOCR_PASSWORD }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        id: docker_build
        with:
          context: .
          file: ${{ inputs.dockerfile }}
          push: true
          tags: |
            registry.digitalocean.com/gainkode/${{ inputs.project_name }}:v${{ env.VERSION }}
            registry.digitalocean.com/gainkode/${{ inputs.project_name }}:latest
          cache-from: |
            type=registry,ref=registry.digitalocean.com/gainkode/${{ inputs.project_name }}:latest
            type=registry,ref=registry.digitalocean.com/gainkode/${{ inputs.project_name }}:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/gainkode/${{ inputs.project_name }}:buildcache,mode=max
          platforms: linux/amd64
          provenance: false
          sbom: false
          outputs: type=image,push=true,compression=zstd,compression-level=3,oci-mediatypes=true
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Display Build Summary
        if: success()
        env:
          VERSION: ${{ env.VERSION }}
          PROJECT: ${{ inputs.project_name }}
          DIGEST: ${{ steps.docker_build.outputs.digest }}
        run: |
          echo "## üöÄ Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Project** | \`${PROJECT}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Version** | \`v${VERSION}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Image Digest** | \`${DIGEST}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Registry** | \`registry.digitalocean.com/gainkode/${PROJECT}\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Image Tags" >> $GITHUB_STEP_SUMMARY
          echo "- \`registry.digitalocean.com/gainkode/${PROJECT}:v${VERSION}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`registry.digitalocean.com/gainkode/${PROJECT}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚ö° Build Metadata" >> $GITHUB_STEP_SUMMARY
          echo "- **Cache Hit**: Check build logs for cache performance" >> $GITHUB_STEP_SUMMARY
          echo "- **Compression**: zstd level 3" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform**: linux/amd64" >> $GITHUB_STEP_SUMMARY

          echo "üöÄ Deployment successful - Image: v${VERSION}"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "## ‚ùå Build Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The Docker build for **${{ inputs.project_name }}** failed." >> $GITHUB_STEP_SUMMARY
          echo "Please check the logs above for details." >> $GITHUB_STEP_SUMMARY
          echo "‚ùå Deployment failed"
