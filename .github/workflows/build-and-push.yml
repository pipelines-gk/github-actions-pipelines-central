name: Build and Push Docker Image

on:
  workflow_call:
    inputs:
      project_name:
        required: true
        type: string
      node_version:
        required: false
        default: "22"
        type: string
      workdir:
        description: "Directorio donde se ejecutar√°n los comandos"
        required: false
        type: string
        default: "."
      dockerfile:
        description: "Archivo Dockerfile a utilizar"
        required: false
        type: string
        default: "Dockerfile"
    secrets:
      GH_TOKEN:
        required: true

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  check-runner:
    uses: ./.github/workflows/check-runner.yml
    secrets:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}

  build-and-push:
    needs: check-runner
    runs-on: ${{ needs.check-runner.outputs.runner-type }}
    steps:
      - name: Show runner info
        run: |
          echo "üèÉ Running on: ${{ needs.check-runner.outputs.runner-type }}"
          echo "Runner: $(hostname)"
          echo "OS: $(uname -a)"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}

      - name: Download environment file
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.project_name }}-env
          path: ${{ inputs.workdir }}

      - name: Download CSR and Key Files
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.project_name }}-csr
          path: ${{ inputs.workdir }}/csr_files

      - name: Verify .env file exists
        run: |
          if [ ! -f "${{ inputs.workdir }}/raw_content.txt" ]; then
            echo "‚ùå Error: .env file not found"
            exit 1
          fi

      - name: Process .env file and extract vars
        run: |
          cd ${{ inputs.workdir }}
          cat raw_content.txt | grep -v '^#' > .env

          DOCR_USERNAME=$(grep "^DOCR_USERNAME=" .env | cut -d'=' -f2)
          DOCR_PASSWORD=$(grep "^DOCR_PASSWORD=" .env | cut -d'=' -f2)

          if [ -z "$DOCR_USERNAME" ] || [ -z "$DOCR_PASSWORD" ]; then
            echo "‚ùå Missing DOCR credentials in .env"
            exit 1
          fi

          echo "DOCR_USERNAME=$DOCR_USERNAME" >> $GITHUB_ENV
          echo "DOCR_PASSWORD=$DOCR_PASSWORD" >> $GITHUB_ENV

      - name: Run Release Please (version only)
        id: release
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          release-type: simple
          path: .
          skip-github-release: true
          skip-github-pull-request: true

      - name: Extract version
        id: extract_version
        run: |
          VERSION="${{ steps.release.outputs.version }}"
          if [ -z "$VERSION" ]; then
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            IFS='.' read -r MAJOR MINOR PATCH <<< "${LAST_TAG#v}"
            PATCH=$((PATCH + 1))
            VERSION="${MAJOR}.${MINOR}.${PATCH}"
            echo "‚ö†Ô∏è No version found, defaulting to bumped version: v$VERSION"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          VERSION="${{ steps.extract_version.outputs.version }}"
          while git rev-parse "v$VERSION" >/dev/null 2>&1; do
            echo "‚ùå Tag v$VERSION already exists. Incrementing version..."
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
            PATCH=$((PATCH + 1))
            VERSION="${MAJOR}.${MINOR}.${PATCH}"
            echo "‚úÖ New version: v$VERSION"
          done
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          git tag "v$VERSION"
          git push origin "v$VERSION"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Install dependencies
        run: npm ci
        working-directory: ${{ inputs.workdir }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DigitalOcean Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: ${{ env.DOCR_USERNAME }}
          password: ${{ env.DOCR_PASSWORD }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ inputs.dockerfile }}
          push: true
          tags: |
            registry.digitalocean.com/gainkode/${{ inputs.project_name }}:v${{ env.VERSION }}

      - name: Notify deployment success
        if: success()
        run: |
          echo "üöÄ Deployment successful"
          echo "Image published with tag: v${{ env.VERSION }}"

      - name: Notify deployment failure
        if: failure()
        run: echo "‚ùå Deployment failed"
