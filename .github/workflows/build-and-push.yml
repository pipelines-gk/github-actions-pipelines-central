name: Build and Push Docker Image

on:
  workflow_call:
    inputs:
      project_name:
        required: true
        type: string
      node_version:
        required: false
        default: "22"
        type: string
      workdir:
        description: "Directorio donde se ejecutar√°n los comandos"
        required: false
        type: string
      dockerfile:
        description: "Archivo Dockerfile a utilizar"
        required: false
        type: string
        default: "Dockerfile"
    secrets:
      GH_TOKEN:
        required: true

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Change to workdir
        run: cd ${{ inputs.workdir }}
        if: inputs.workdir

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}

      - name: Download and prepare environment file
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.project_name }}
          path: ${{ inputs.workdir }}

      - name: Verify .env file exists
        run: |
          if [ ! -f "${{ inputs.workdir }}/raw_content.txt" ]; then
            echo "‚ùå Error: .env file not found"
            exit 1
          fi

      - name: Process .env file and extract vars
        run: |
          cd ${{ inputs.workdir }}
          cat raw_content.txt | grep -v '^#' > .env

          DOCR_USERNAME=$(grep "^DOCR_USERNAME=" .env | cut -d'=' -f2)
          DOCR_PASSWORD=$(grep "^DOCR_PASSWORD=" .env | cut -d'=' -f2)
          if [ -z "$DOCR_USERNAME" ] || [ -z "$DOCR_PASSWORD" ]; then
            echo "‚ùå Missing DOCR credentials in .env"
            exit 1
          fi
          echo "DOCR_USERNAME=$DOCR_USERNAME" >> $GITHUB_ENV
          echo "DOCR_PASSWORD=$DOCR_PASSWORD" >> $GITHUB_ENV

      - name: Run semantic-release (dry-run)
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        with:
          dry_run: true
          branches: main
          extra_plugins: |
            @semantic-release/commit-analyzer
            @semantic-release/release-notes-generator
            @semantic-release/github
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          SEMANTIC_RELEASE_CONFIG: |
            {
              "plugins": [
                ["@semantic-release/commit-analyzer", {
                  "preset": "conventionalcommits",
                  "releaseRules": [
                    { "type": "feat", "release": "minor" },
                    { "type": "fix", "release": "patch" },
                    { "type": "refactor", "release": "patch" },
                    { "type": "style", "release": "patch" },
                    { "type": "test", "release": "patch" },
                    { "type": "chore", "release": "patch" },
                    { "release": "patch" }
                  ]
                }],
                "@semantic-release/release-notes-generator",
                "@semantic-release/github"
              ]
            }

      - name: Extract version from semantic-release output
        run: |
          VERSION=$(jq -r '.nextRelease.version' <<< '${{ steps.semantic.outputs.release }}')
          if [ -z "$VERSION" ] || [ "$VERSION" == "null" ]; then
            echo "‚ùå No new version could be determined."
            exit 1
          fi
          echo "VERSION=v$VERSION" >> $GITHUB_ENV
          echo "‚úÖ Using version: v$VERSION"

      - name: Install dependencies
        run: npm ci
        working-directory: ${{ inputs.workdir }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DigitalOcean Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: ${{ env.DOCR_USERNAME }}
          password: ${{ env.DOCR_PASSWORD }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ inputs.dockerfile }}
          push: true
          platforms: linux/amd64
          tags: |
            registry.digitalocean.com/gainkode/${{ inputs.project_name }}:${{ env.VERSION }}

      - name: Notify deployment success
        if: success()
        run: |
          echo "üöÄ Deployment successful"
          echo "Image published with tag:"
          echo "  - ${{ env.VERSION }}"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed"
