name: Build and Push Docker Image

on:
  workflow_call:
    inputs:
      project_name:
        required: true
        type: string
      node_version:
        required: false
        default: "22"
        type: string
      workdir:
        description: "Directorio donde se ejecutar√°n los comandos"
        required: false
        type: string
      dockerfile:
        description: "Archivo Dockerfile a utilizar"
        required: false
        type: string
        default: "Dockerfile"
    secrets:
      GH_TOKEN:
        required: true

permissions:
  contents: read
  packages: write
  actions: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Fetch all tags
        run: git fetch --tags --force

      - name: Change to workdir
        run: cd ${{ inputs.workdir }}
        if: inputs.workdir

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}

      - name: Download and prepare environment file
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.project_name }}
          path: ${{ inputs.workdir }}

      - name: Verify .env file exists
        run: |
          if [ ! -f "${{ inputs.workdir }}/raw_content.txt" ]; then
            echo "‚ùå Error: .env file not found"
            exit 1
          fi

      - name: Process .env file and extract vars
        run: |
          cd ${{ inputs.workdir }}
          cat raw_content.txt | grep -v '^#' > .env

          DOCR_USERNAME=$(grep "^DOCR_USERNAME=" .env | cut -d'=' -f2)
          DOCR_PASSWORD=$(grep "^DOCR_PASSWORD=" .env | cut -d'=' -f2)
          if [ -z "$DOCR_USERNAME" ] || [ -z "$DOCR_PASSWORD" ]; then
            echo "‚ùå Missing DOCR credentials in .env"
            exit 1
          fi
          echo "DOCR_USERNAME=$DOCR_USERNAME" >> $GITHUB_ENV
          echo "DOCR_PASSWORD=$DOCR_PASSWORD" >> $GITHUB_ENV

      - name: Generate and bump VERSION automatically
        run: |
          git fetch --tags --force
          LAST_TAG=$(git tag --sort=-v:refname | head -n 1)
          if [[ -z "$LAST_TAG" ]]; then
            LAST_TAG="v0.0.0"
          fi

          VERSION_PARTS=(${LAST_TAG//./ })
          MAJOR=${VERSION_PARTS[0]#v}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          NEXT_PATCH=$((PATCH + 1))
          NEW_VERSION="v$MAJOR.$MINOR.$NEXT_PATCH"

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag $NEW_VERSION

          echo "‚úÖ New VERSION generated: $NEW_VERSION"
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Install dependencies
        run: npm ci
        working-directory: ${{ inputs.workdir }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DigitalOcean Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: ${{ env.DOCR_USERNAME }}
          password: ${{ env.DOCR_PASSWORD }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ inputs.dockerfile }}
          push: true
          tags: |
            registry.digitalocean.com/gainkode/${{ inputs.project_name }}:${{ env.VERSION }}
          outputs: type=registry

      - name: Notify deployment success
        if: success()
        run: |
          echo "üöÄ Deployment successful"
          echo "Image published with tag:"
          echo "  - ${{ env.VERSION }}"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed"
