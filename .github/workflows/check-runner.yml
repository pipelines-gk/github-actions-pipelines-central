name: Check Runner Availability

on:
  workflow_call:
    secrets:
      GH_TOKEN:
        required: true
    outputs:
      runner-type:
        description: "Type of runner to use (self-hosted or ubuntu-latest)"
        value: ${{ jobs.check-runner.outputs.runner-type }}

jobs:
  check-runner:
    runs-on: ubuntu-latest
    outputs:
      runner-type: ${{ steps.check.outputs.runner-type }}
    steps:
      - name: Check if self-hosted runner is available
        id: check
        run: |
          echo "🔍 Checking runner availability..."
          echo "=================================="
          
          # Verificar permisos del token
          echo "🔑 Checking token permissions..."
          TOKEN_INFO=$(curl -s -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/user")
          
          if echo "$TOKEN_INFO" | jq -e '.login' > /dev/null; then
            USER=$(echo "$TOKEN_INFO" | jq -r '.login')
            echo "✅ Token valid for user: $USER"
          else
            echo "❌ Token validation failed"
            echo "Token response: $TOKEN_INFO"
          fi
          
          echo ""
          echo "📊 Repository: ${{ github.repository }}"
          echo "🏢 Organization: ${{ github.repository_owner }}"
          echo "🎯 Target runner: gainkode-enterprise-runner_self_hosted"
          echo "🏷️  Expected labels: self-hosted, Linux, X64, docker, ubuntu, enterprise"
          
          # Intentar diferentes endpoints de la API
          echo ""
          echo "🔗 Trying repository runners endpoint..."
          REPO_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runners")
          
          echo "📋 Repository API Response:"
          echo "$REPO_RESPONSE" | jq '.'
          
          # Intentar endpoint de organización
          echo ""
          echo "🔗 Trying organization runners endpoint..."
          ORG_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/orgs/${{ github.repository_owner }}/actions/runners")
          
          echo "📋 Organization API Response:"
          echo "$ORG_RESPONSE" | jq '.'
          
          # Decidir qué respuesta usar
          if echo "$REPO_RESPONSE" | jq -e '.runners' > /dev/null; then
            RESPONSE="$REPO_RESPONSE"
            SOURCE="repository"
          elif echo "$ORG_RESPONSE" | jq -e '.runners' > /dev/null; then
            RESPONSE="$ORG_RESPONSE"
            SOURCE="organization"
          else
            echo "❌ No valid runners found in either repository or organization"
            echo "🚀 DECISION: Using GITHUB RUNNER (ubuntu-latest)"
            echo "runner-type=ubuntu-latest" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo ""
          echo "✅ Using $SOURCE runners"
          
          # Mostrar todos los runners disponibles con detalles
          echo ""
          echo "📋 All available runners with details:"
          RUNNER_COUNT=$(echo "$RESPONSE" | jq '.runners | length')
          echo "Total runners found: $RUNNER_COUNT"
          
          if [ "$RUNNER_COUNT" -gt 0 ]; then
            echo "$RESPONSE" | jq -r '.runners[] | "  - \(.name) (Status: \(.status)) [Labels: \(.labels[].name | join(", "))]"'
            
            echo ""
            echo "🔍 Detailed runner information:"
            echo "$RESPONSE" | jq -r '.runners[] | "Runner: \(.name)" + "\n  Status: \(.status)" + "\n  Labels: \(.labels[].name | join(", "))" + "\n  OS: \(.os)" + "\n  Architecture: \(.architecture)" + "\n---"'
          else
            echo "  No runners found"
          fi
          
          # Buscar específicamente nuestro runner
          echo ""
          echo "🎯 Looking for specific runner: gainkode-enterprise-runner_self_hosted"
          TARGET_RUNNER=$(echo "$RESPONSE" | jq -r '.runners[] | select(.name == "gainkode-enterprise-runner_self_hosted")')
          
          if [ -n "$TARGET_RUNNER" ] && [ "$TARGET_RUNNER" != "null" ]; then
            echo "✅ Target runner found!"
            echo "$TARGET_RUNNER" | jq -r '"  Name: \(.name)" + "\n  Status: \(.status)" + "\n  Labels: \(.labels[].name | join(", "))" + "\n  OS: \(.os)" + "\n  Architecture: \(.architecture)"'
          else
            echo "❌ Target runner NOT found"
          fi
          
          # Verificar si hay runners self-hosted disponibles (online o idle)
          AVAILABLE_RUNNERS=$(echo "$RESPONSE" | jq -r '.runners[] | select((.status == "online" or .status == "idle") and (.labels[] | .name == "self-hosted")) | .name')
          
          echo ""
          echo "🎯 Decision process:"
          echo "==================="
          
          if [ -n "$AVAILABLE_RUNNERS" ]; then
            echo "✅ Self-hosted runner(s) AVAILABLE found (online or idle):"
            echo "$AVAILABLE_RUNNERS" | while read -r runner; do
              # Obtener el estado específico de este runner
              RUNNER_STATUS=$(echo "$RESPONSE" | jq -r --arg name "$runner" '.runners[] | select(.name == $name) | .status')
              RUNNER_LABELS=$(echo "$RESPONSE" | jq -r --arg name "$runner" '.runners[] | select(.name == $name) | .labels[].name | join(", ")')
              echo "   🏃 $runner (Status: $RUNNER_STATUS) [Labels: $RUNNER_LABELS]"
            done
            echo ""
            echo "🚀 DECISION: Using SELF-HOSTED runner"
            echo "runner-type=self-hosted" >> $GITHUB_OUTPUT
          else
            echo "❌ No self-hosted runners AVAILABLE found (online or idle)"
            echo ""
            echo "🔍 Checking for other self-hosted runners:"
            OFFLINE_RUNNERS=$(echo "$RESPONSE" | jq -r '.runners[] | select(.status == "offline" and (.labels[] | .name == "self-hosted")) | .name')
            BUSY_RUNNERS=$(echo "$RESPONSE" | jq -r '.runners[] | select(.status == "busy" and (.labels[] | .name == "self-hosted")) | .name')
            
            if [ -n "$OFFLINE_RUNNERS" ]; then
              echo "⚠️  Self-hosted runner(s) OFFLINE:"
              echo "$OFFLINE_RUNNERS" | while read -r runner; do
                RUNNER_LABELS=$(echo "$RESPONSE" | jq -r --arg name "$runner" '.runners[] | select(.name == $name) | .labels[].name | join(", ")')
                echo "   🏃 $runner (OFFLINE) [Labels: $RUNNER_LABELS]"
              done
            fi
            
            if [ -n "$BUSY_RUNNERS" ]; then
              echo "⏳ Self-hosted runner(s) BUSY:"
              echo "$BUSY_RUNNERS" | while read -r runner; do
                RUNNER_LABELS=$(echo "$RESPONSE" | jq -r --arg name "$runner" '.runners[] | select(.name == $name) | .labels[].name | join(", ")')
                echo "   🏃 $runner (BUSY) [Labels: $RUNNER_LABELS]"
              done
            fi
            
            if [ -z "$OFFLINE_RUNNERS" ] && [ -z "$BUSY_RUNNERS" ]; then
              echo "❌ No self-hosted runners found at all"
            fi
            echo ""
            echo "🚀 DECISION: Using GITHUB RUNNER (ubuntu-latest)"
            echo "runner-type=ubuntu-latest" >> $GITHUB_OUTPUT
          fi
          
          echo ""
          echo "=================================="
          echo "🎯 FINAL CHOICE: ${{ steps.check.outputs.runner-type }}"
          echo "==================================" 