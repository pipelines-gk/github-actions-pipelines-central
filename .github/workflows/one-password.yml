name: One Password

on:
  workflow_call:
    inputs:
      env_name_onepassword:
        required: true
        type: string
      project_name:
        required: true
        type: string
      vault_name:
        required: false
        type: string
        default: yclp7kgj7vku4d3wovopw2jabm
      files_path:
        required: false
        type: string
        default: 'csr_files'
    secrets:
      GH_TOKEN:
        required: true
      ONE_PASSWORD_SERVICE_ACCOUNT_TOKEN:
        required: true

permissions:
  contents: read
  packages: write
  actions: read

jobs:
  prepare-one-password:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      # ‚¨áÔ∏è 1. Install 1Password CLI v2 (Official Action - Much Faster)
      - name: Install 1Password CLI
        uses: 1password/install-cli-action@v1

      # ‚¨áÔ∏è 2. Fetch all fields from the item (env and certificates/keys) - ALWAYS FRESH
      - name: Fetch secrets from 1Password
        id: fetch-secrets
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.ONE_PASSWORD_SERVICE_ACCOUNT_TOKEN }}
          OP_CACHE: "false"
        run: |
          # Single API call to get the item as JSON (ALWAYS FRESH - NO CACHE)
          item_json=$(op item get "env-${{ inputs.env_name_onepassword }}" --vault "${{ inputs.vault_name }}" --format json)

          # Create target directory for non-.env files
          if [ -n "${{ inputs.files_path }}" ]; then
            mkdir -p "${{ inputs.files_path }}"
          fi

          # Process each field and save as file
          # Filter out system fields (notesPlain, empty labels, etc.)
          echo "$item_json" | jq -r '.fields[] | select(.label != null and .label != "" and .label != "notesPlain" and .value != null and .value != "") | @json' | \
          while read -r field; do
            filename=$(echo "$field" | jq -r '.label')
            
            # Skip if filename is empty, invalid, or contains only whitespace
            if [ -z "$filename" ] || [[ "$filename" =~ ^[[:space:]]*$ ]]; then
              echo "‚ö†Ô∏è Skipping invalid filename"
              continue
            fi
            
            # .env always goes to root, other files go to files_path
            if [ "$filename" = ".env" ]; then
              echo "‚¨áÔ∏è Saving $filename (root)"
              echo "$field" | jq -r '.value' > "$filename"
            else
              if [ -n "${{ inputs.files_path }}" ]; then
                TARGET_PATH="${{ inputs.files_path }}/"
              else
                TARGET_PATH=""
              fi
              echo "‚¨áÔ∏è Saving $filename"
              echo "$field" | jq -r '.value' > "${TARGET_PATH}${filename}"
            fi
          done

      # ‚¨áÔ∏è 3. Create temp directory and organize files
      - name: Organize files for upload
        run: |
          echo "üìÅ Current directory contents:"
          ls -la
          
          echo "üîç Searching for .env file:"
          find . -name ".env" -type f || echo "No .env found"
          
          mkdir -p _temp_upload
          
          # Copy .env to temp root (check multiple locations)
          if [ -f ".env" ]; then
            echo "‚úÖ Copying .env from root to _temp_upload/"
            cp .env _temp_upload/.env
          elif [ -f "${{ inputs.files_path }}/.env" ]; then
            echo "‚úÖ Copying .env from ${{ inputs.files_path }}/ to _temp_upload/"
            cp "${{ inputs.files_path }}/.env" _temp_upload/.env
          else
            echo "‚ùå ERROR: .env file not found!"
            exit 1
          fi
          
          # Copy other files maintaining structure
          if [ -n "${{ inputs.files_path }}" ] && [ -d "${{ inputs.files_path }}" ]; then
            echo "‚úÖ Copying ${{ inputs.files_path }}/ to _temp_upload/"
            cp -r "${{ inputs.files_path }}" _temp_upload/
          fi
          
          echo "üì¶ Files to upload:"
          ls -laR _temp_upload/

      # ‚¨áÔ∏è 4. Upload all files as artifact (with compression)
      - name: Upload All Files
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.project_name }}-files
          path: _temp_upload/
          retention-days: 1
          compression-level: 6
          if-no-files-found: error
