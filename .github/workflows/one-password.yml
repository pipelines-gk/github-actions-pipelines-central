name: One Password

on:
  workflow_call:
    inputs:
      env_name_onepassword:
        required: true
        type: string
      project_name:
        required: true
        type: string
      vault_name:
        required: false
        type: string
        default: yclp7kgj7vku4d3wovopw2jabm
    secrets:
      GH_TOKEN:
        required: true
      ONE_PASSWORD_SERVICE_ACCOUNT_TOKEN:
        required: true

permissions:
  contents: read
  packages: write
  actions: read

jobs:
  check-runner:
    runs-on: ubuntu-latest
    outputs:
      use-self-hosted: ${{ steps.check.outputs.available }}
    steps:
      - name: Check if self-hosted runner is available
        id: check
        run: |
          echo "üîç Checking runner availability..."
          
          # Usar GitHub API para verificar runners
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runners")
          
          # Verificar si hay runners self-hosted online
          ONLINE_RUNNERS=$(echo "$RESPONSE" | jq -r '.runners[] | select(.status == "online" and (.labels[] | .name == "self-hosted")) | .name')
          
          if [ -n "$ONLINE_RUNNERS" ]; then
            echo "‚úÖ Self-hosted runner available: $ONLINE_RUNNERS"
            echo "available=true" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è Self-hosted runner offline, using GitHub runner"
            echo "available=false" >> $GITHUB_OUTPUT
          fi

  prepare-one-password:
    needs: check-runner
    runs-on: ${{ needs.check-runner.outputs.use-self-hosted == 'true' && 'self-hosted' || 'ubuntu-latest' }}
    steps:
      - name: Show runner info
        run: |
          echo "üèÉ Running on: ${{ needs.check-runner.outputs.use-self-hosted == 'true' && 'self-hosted' || 'ubuntu-latest' }}"
          echo "Runner: $(hostname)"
          echo "OS: $(uname -a)"

      # ‚¨áÔ∏è 1. Install 1Password CLI v2
      - name: Install 1Password CLI v2
        run: |
          sudo mkdir -p /etc/apt/keyrings
          curl -sSfL https://downloads.1password.com/linux/keys/1password.asc \
            | sudo gpg --dearmor --output /etc/apt/keyrings/1password-archive-keyring.gpg
          echo 'deb [signed-by=/etc/apt/keyrings/1password-archive-keyring.gpg] https://downloads.1password.com/linux/debian/amd64 stable main' \
            | sudo tee /etc/apt/sources.list.d/1password.list
          sudo apt-get update && sudo apt-get install -y 1password-cli
          op --version  # Confirm version

      # ‚¨áÔ∏è 2. Fetch all fields from the item (env and certificates/keys)
      - name: Fetch secrets from 1Password
        id: fetch-secrets
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.ONE_PASSWORD_SERVICE_ACCOUNT_TOKEN }}
        run: |
          # Get the item as JSON
          item_json=$(op item get "env-${{ inputs.env_name_onepassword }}" --vault "${{ inputs.vault_name }}" --format json)
          
          # Extract the .env field (by label)
          env_content=$(echo "$item_json" | jq -r '.fields[] | select(.label == ".env") | .value')
          echo "$env_content" > raw_content.txt

          # Save certificates and keys dynamically
          mkdir -p csr_files
          echo "$item_json" | jq -c '.fields[] | select(.label != ".env")' | while read -r field; do
            filename=$(echo "$field" | jq -r '.label')
            filecontent=$(echo "$field" | jq -r '.value')
            echo "‚¨áÔ∏è Saving $filename"
            echo "$filecontent" > "csr_files/$filename"
          done

      # ‚¨áÔ∏è 3. Upload .env as artifact
      - name: Upload Environment
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.project_name }}-env
          path: raw_content.txt
          retention-days: 1

      # ‚¨áÔ∏è 4. Upload CSR and Key files as artifact
      - name: Upload CSR and Key Files
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.project_name }}-csr
          path: csr_files/
          retention-days: 1
