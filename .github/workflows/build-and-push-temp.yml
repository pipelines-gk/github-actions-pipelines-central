name: Build and Push Docker Image

on:
  workflow_call:
    inputs:
      project_name:
        required: true
        type: string
      node_version:
        required: false
        default: "22"
        type: string
      workdir:
        description: "Directorio donde se ejecutarÃ¡n los comandos"
        required: false
        type: string
        default: "."
      dockerfile:
        description: "Archivo Dockerfile a utilizar"
        required: false
        type: string
        default: "Dockerfile"
      enable_cache:
        description: "Enable Docker layer caching"
        required: false
        type: boolean
        default: true
    secrets:
      GH_TOKEN:
        required: true

permissions:
  contents: write
  packages: write
  actions: read
  pull-requests: write

concurrency:
  group: build-${{ inputs.project_name }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      DOCKER_BUILDKIT: "1"
      BUILDKIT_PROGRESS: plain

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 10
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: 'npm'
          cache-dependency-path: '${{ inputs.workdir }}/package-lock.json'

      - name: Cache node_modules
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: |
            ${{ inputs.workdir }}/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ inputs.node_version }}-${{ hashFiles(format('{0}/package-lock.json', inputs.workdir)) }}
          restore-keys: |
            ${{ runner.os }}-node-${{ inputs.node_version }}-
            ${{ runner.os }}-node-

      - name: Download files from 1Password
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.project_name }}-files
          path: ${{ inputs.workdir }}

      - name: Verify .env file exists
        run: |
          WORKDIR="${{ inputs.workdir }}"
          ENV_PATH="$WORKDIR/.env"
          [ "$WORKDIR" = "." ] && ENV_PATH=".env"
          if [ ! -f "$ENV_PATH" ]; then
            echo ".env not found"
            exit 1
          fi

      - name: Process .env file and extract vars
        run: |
          WORKDIR="${{ inputs.workdir }}"
          [ "$WORKDIR" != "." ] && cd "$WORKDIR"
          DOCR_USERNAME=$(grep "^DOCR_USERNAME=" .env | cut -d'=' -f2)
          DOCR_PASSWORD=$(grep "^DOCR_PASSWORD=" .env | cut -d'=' -f2)
          if [ -z "$DOCR_USERNAME" ]; then
            echo "Missing DOCR_USERNAME"
            exit 1
          fi
          if [ -z "$DOCR_PASSWORD" ]; then
            echo "Missing DOCR_PASSWORD"
            exit 1
          fi
          echo "DOCR_USERNAME=$DOCR_USERNAME" >> $GITHUB_ENV
          echo "DOCR_PASSWORD=$DOCR_PASSWORD" >> $GITHUB_ENV

      - name: Run Release Please (version only)
        id: release
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          release-type: simple
          path: .
          skip-github-release: true
          skip-github-pull-request: true

      - name: Extract version from Release Please
        id: extract_version
        run: |
          VERSION="${{ steps.release.outputs.version }}"
          if [ -z "$VERSION" ]; then
            VERSION="0.0.0"
            echo "No version from Release Please, will use smart versioning"
          fi
          echo "BASE_VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Git tag with smart versioning
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config --global advice.detachedHead false
          
          BASE_VERSION="${{ env.BASE_VERSION }}"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
          
          if [ "$BASE_VERSION" = "0.0.0" ]; then
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            IFS='.' read -r MAJOR MINOR PATCH <<< "${LAST_TAG#v}"
            echo "Using last tag as base: v${MAJOR}.${MINOR}.${PATCH}"
          fi
          
          ALL_TAGS=$(git ls-remote --tags origin | awk '{print $2}' | sed 's|refs/tags/||' | grep "^v${MAJOR}\.${MINOR}\." || true)
          
          if [ -z "$ALL_TAGS" ]; then
            FINAL_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          else
            MAX_PATCH=$(echo "$ALL_TAGS" | sed "s|^v${MAJOR}\.${MINOR}\.||" | grep -E '^[0-9]+$' | sort -n | tail -1)
            [ -z "$MAX_PATCH" ] && MAX_PATCH=0
            FINAL_VERSION="${MAJOR}.${MINOR}.$((MAX_PATCH + 1))"
          fi
          
          echo "Computed version: v${FINAL_VERSION}"
          
          for i in 1 2 3; do
            if git tag "v${FINAL_VERSION}" 2>/dev/null && git push origin "v${FINAL_VERSION}" 2>/dev/null; then
              echo "Tag created successfully: v${FINAL_VERSION}"
              echo "VERSION=${FINAL_VERSION}" >> $GITHUB_ENV
              echo "version=${FINAL_VERSION}" >> $GITHUB_OUTPUT
              exit 0
            fi
            git tag -d "v${FINAL_VERSION}" 2>/dev/null || true
            IFS='.' read -r M N P <<< "${FINAL_VERSION}"
            FINAL_VERSION="${M}.${N}.$((P + 1)}"
            echo "Tag collision, retrying with v${FINAL_VERSION} (attempt $i/3)"
            [ $i -lt 3 ] && sleep 1
          done
          echo "Failed to create tag after 3 attempts"
          exit 1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

